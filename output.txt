CONSTTK const
INTTK int
IDENFR const01
ASSIGN =
INTCON 1
MULT *
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR const02
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR const03
ASSIGN =
INTCON 1
MINU -
INTCON 1
MULT *
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR const1DArray01
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR const2DArray01
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var01
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR var02
ASSIGN =
INTCON 1
COMMA ,
IDENFR var03
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR var1DArr01
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR var2DArr01
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR var1DArr02
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR var2DArr02
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR func01
LPARENT (
INTTK int
IDENFR param01
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func02
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func03
LPARENT (
INTTK int
IDENFR param01
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func04
LPARENT (
INTTK int
IDENFR param1DArr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR param2DArr
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19231188"
RPARENT )
SEMICN ;
INTTK int
IDENFR var01
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR var02
ASSIGN =
INTCON 1
COMMA ,
IDENFR var03
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR var04
SEMICN ;
INTTK int
IDENFR var1DArr01
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR var2DArr01
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR var1DArr02
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR var2DArr02
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
IDENFR var01
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
IDENFR var01
ASSIGN =
MINU -
INTCON 1
PLUS +
LPARENT (
INTCON 1
RPARENT )
MULT *
IDENFR var02
SEMICN ;
IDENFR var01
ASSIGN =
INTCON 1
DIV /
IDENFR func02
LPARENT (
RPARENT )
SEMICN ;
IDENFR var01
ASSIGN =
INTCON 1
MOD %
IDENFR func03
LPARENT (
IDENFR var02
RPARENT )
SEMICN ;
IDENFR var01
ASSIGN =
INTCON 1
MOD %
IDENFR func04
LPARENT (
IDENFR var1DArr01
COMMA ,
IDENFR var2DArr02
RPARENT )
SEMICN ;
IDENFR var01
ASSIGN =
IDENFR func03
LPARENT (
IDENFR var1DArr01
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IDENFR var01
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 1
RPARENT )
LBRACE {
IDENFR var01
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR var01
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
GRE >
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 1
EQL ==
INTCON 1
LEQ <=
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
LEQ <=
INTCON 1
NEQ !=
INTCON 1
GEQ >=
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
WHILETK while
LPARENT (
INTCON 0
RPARENT )
BREAKTK break
SEMICN ;
WHILETK while
LPARENT (
INTCON 0
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR var01
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR var1DArr01
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR var2DArr01
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR var01
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1"
RPARENT )
SEMICN ;
INTCON 0
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
