INTTK int
IDENFR fib_matrix
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR __res
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 5
COMMA ,
INTCON 5
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR __useless
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
VOIDTK void
IDENFR __vec_mul
LPARENT (
INTTK int
IDENFR res
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR mat
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR vec
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR res
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR vec
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR mat
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR vec
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR mat
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR res
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR vec
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR mat
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR vec
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR mat
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR __mat_mul
LPARENT (
INTTK int
IDENFR res
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR x
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR y
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
IDENFR res
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR y
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR y
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR res
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR y
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR y
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR res
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR y
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR y
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR res
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR y
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR y
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR __power
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR cur
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR res
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR res
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR cur
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR res
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR cur
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR res
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR cur
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR res
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR cur
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR __mat_mul
LPARENT (
IDENFR res
COMMA ,
IDENFR cur
COMMA ,
IDENFR fib_matrix
RPARENT )
SEMICN ;
IDENFR cur
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR res
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR cur
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR res
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR cur
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR res
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR cur
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR res
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RETURNTK return
IDENFR __power
LPARENT (
IDENFR n
MINU -
INTCON 1
COMMA ,
IDENFR cur
COMMA ,
IDENFR res
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR power
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR res
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
LEQ <=
INTCON 0
RPARENT )
RETURNTK return
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR temp
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
RETURNTK return
IDENFR __power
LPARENT (
IDENFR n
COMMA ,
IDENFR temp
COMMA ,
IDENFR res
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR error
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Error!\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR out
LPARENT (
INTTK int
IDENFR r
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d %d\n%d %d\n"
COMMA ,
IDENFR r
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR r
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR r
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR r
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR down
ASSIGN =
INTCON 0
DIV /
INTCON 10078
PLUS +
LPARENT (
INTCON 0
MULT *
INTCON 45
RPARENT )
SEMICN ;
INTTK int
IDENFR n
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR res
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR vec_list
LBRACK [
INTCON 6
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373372\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a[n] = a[n - 1] + a[n - 2] (for different init values)\n"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR n
GRE >
IDENFR down
RPARENT )
LBRACE {
INTTK int
IDENFR p
SEMICN ;
IDENFR p
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ret
ASSIGN =
IDENFR power
LPARENT (
IDENFR p
COMMA ,
IDENFR res
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "/* input = %d */\n"
COMMA ,
IDENFR p
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR ret
AND &&
IDENFR error
LPARENT (
RPARENT )
RPARENT )
LBRACE {
IDENFR n
ASSIGN =
IDENFR n
MINU -
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ret
OR ||
IDENFR out
LPARENT (
IDENFR res
RPARENT )
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 6
OR ||
INTCON 1
RPARENT )
LBRACE {
IDENFR __vec_mul
LPARENT (
IDENFR tmp
COMMA ,
IDENFR res
COMMA ,
IDENFR vec_list
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "when a[0] = %d, a[1] = %d ==> a[%d] = %d\n"
COMMA ,
IDENFR vec_list
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR vec_list
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR p
COMMA ,
IDENFR tmp
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "//////////////////////////////////////\n"
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
MINU -
PLUS +
MINU -
PLUS +
MINU -
LPARENT (
INTCON 1
MINU -
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "/****************** END ******************/\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ""
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ""
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
